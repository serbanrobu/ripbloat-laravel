extend type Query @guard {
  users(
    search: String @search
    orderBy: _ @orderBy(columns: ["name", "email", "created_at", "deleted_at"])
  ): [User!]! @paginate @softDeletes

  user(id: Hashid! @eq): User @find @softDeletes
  authUser: User @auth
}

extend type Mutation @guard {
  createUser(
    name: String! @rules(apply: ["required"])
    email: Email! @rules(apply: ["unique:users,email"])
    # TODO: delete this line
    password: String! = "secret" @hash
  ): User! @create

  updateUser(id: Hashid!, name: String!, email: Email!): User!
    @validator
    @update

  deleteUser(id: Hashid!): User! @delete
  restoreUser(id: Hashid!): User! @restore
}

type User {
  id: Hashid!
  name: String!
  email: Email!
  deletedAt: DateTime @rename(attribute: "deleted_at")
  createdAt: DateTime! @rename(attribute: "created_at")
  updatedAt: DateTime! @rename(attribute: "updated_at")
  createdTasks: [Task!]! @hasMany
  assignedTasks: [Task!]! @belongsToMany
}
